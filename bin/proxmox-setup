#!/usr/bin/env ruby
## Usage: bundle exec bin/proxmox-setup

require 'gli'
ENV['GLI_DEBUG']='true'


# Only tested on a Mac
@log='setup.log'

$: << File.expand_path(File.join(File.dirname(__FILE__),'..','..','..','lib'))
$: << File.expand_path(File.join(File.dirname(__FILE__),'..','lib'))

lib = '../lib/proxmox-setup.rb'
require_relative lib

include GLI::App


setup_defaults("./my.defaults.rb")
#a Ruby file is simpler at this point than GLI's config_file

program_desc 'Setup Proxmox in various interesting ways, in Virtualbox etc.'

program_long_desc 'Setup Proxmox in various interesting ways, in Virtualbox etc.
    Typically: virtualbox-install, virtualbox-start ssh-keys, upload-templates, mount-nfs, container-mount

REQUIREMENTS
- An SSD with at least 10gb of free space
- At least 8gb RAM
'

version ProxmoxSetup::VERSION

subcommand_option_handling :normal
arguments :strict

#desc 'Describe some switch here'
#switch [:v,:verbose]

desc 'IP address of your Proxmox server (set with $PVE)'
arg_name 'ip-address'
flag [:ip]
default_value(env_pve_value)

desc 'VBox VM name of your Proxmox server'
arg_name 'vm'
flag [:vm]

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)

